import React, { useState, useEffect } from 'react';
import { 
  Clock, Rocket, TrendingDown, ChevronRight, Calendar,
  RefreshCcw, Share2, Download, Trophy, Timer
} from 'lucide-react';

const OOFTimeMachine = () => {
  const [simulation, setSimulation] = useState({
    investment: 1000,
    startDate: '',
    selectedCoin: null,
    oofComparison: null,
    isSimulating: false
  });

  // Historical memecoin data (in production, this would come from an API)
  const memecoins = [
    {
      name: 'BONK',
      symbol: 'BONK',
      keyEvents: [
        { date: '2023-12-25', price: 0.000001, event: 'Launch' },
        { date: '2024-01-05', price: 0.00001, event: 'Peak' },
        { date: '2024-01-15', price: 0.000005, event: 'Correction' }
      ],
      description: 'The Solana Dog that went 100x',
      emoji: 'üêï'
    },
    {
      name: 'MYRO',
      symbol: 'MYRO',
      keyEvents: [
        { date: '2024-02-01', price: 0.00001, event: 'Launch' },
        { date: '2024-02-15', price: 0.0001, event: 'Peak' },
        { date: '2024-02-28', price: 0.00005, event: 'Correction' }
      ],
      description: 'The cat that caught everyone by surprise',
      emoji: 'üê±'
    },
    // Add more memecoins
  ];

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="bg-white rounded-xl shadow-lg p-8">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-purple-900 mb-2">
            OOF Time Machine üöÄ
          </h1>
          <p className="text-purple-600">
            Travel back in time and see what could have been... or what could be with $OOF!
          </p>
        </div>

        {/* Time Machine Controls */}
        <div className="grid grid-cols-3 gap-8 mb-12">
          {/* Investment Amount */}
          <div className="bg-purple-50 p-6 rounded-xl">
            <label className="block text-purple-900 font-bold mb-2">
              Investment Amount
            </label>
            <div className="relative">
              <span className="absolute left-3 top-3 text-purple-600">$</span>
              <input
                type="number"
                value={simulation.investment}
                onChange={(e) => setSimulation(prev => ({
                  ...prev,
                  investment: e.target.value
                }))}
                className="w-full pl-8 p-3 rounded-lg border-2 border-purple-200 
                          focus:border-purple-500 outline-none"
              />
            </div>
          </div>

          {/* Date Selector */}
          <div className="bg-purple-50 p-6 rounded-xl">
            <label className="block text-purple-900 font-bold mb-2">
              Travel Back To
            </label>
            <select
              value={simulation.startDate}
              onChange={(e) => setSimulation(prev => ({
                ...prev,
                startDate: e.target.value
              }))}
              className="w-full p-3 rounded-lg border-2 border-purple-200 
                        focus:border-purple-500 outline-none"
            >
              <option value="">Select a date...</option>
              <option value="2023-12">December 2023</option>
              <option value="2024-01">January 2024</option>
              <option value="2024-02">February 2024</option>
            </select>
          </div>

          {/* Memecoin Selector */}
          <div className="bg-purple-50 p-6 rounded-xl">
            <label className="block text-purple-900 font-bold mb-2">
              Choose Your (Missed) Destiny
            </label>
            <select
              value={simulation.selectedCoin?.symbol}
              onChange={(e) => setSimulation(prev => ({
                ...prev,
                selectedCoin: memecoins.find(c => c.symbol === e.target.value)
              }))}
              className="w-full p-3 rounded-lg border-2 border-purple-200 
                        focus:border-purple-500 outline-none"
            >
              <option value="">Select a memecoin...</option>
              {memecoins.map(coin => (
                <option key={coin.symbol} value={coin.symbol}>
                  {coin.emoji} {coin.name} - {coin.description}
                </option>
              ))}
            </select>
          </div>
        </div>

        {/* Simulation Button */}
        <div className="text-center mb-12">
          <button
            onClick={() => {
              setSimulation(prev => ({ ...prev, isSimulating: true }));
              // Simulate calculation
              setTimeout(() => {
                setSimulation(prev => ({ 
                  ...prev, 
                  isSimulating: false,
                  oofComparison: {
                    missedGains: prev.investment * 10,
                    oofPotential: prev.investment * 15,
                    timeElapsed: '2 months'
                  }
                }));
              }, 2000);
            }}
            disabled={simulation.isSimulating}
            className="bg-purple-600 text-white px-8 py-4 rounded-xl 
                     hover:bg-purple-700 transition-colors text-lg
                     disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {simulation.isSimulating ? (
              <span className="flex items-center">
                <RefreshCcw className="animate-spin mr-2" />
                Traveling through time...
              </span>
            ) : (
              'Start Time Travel! ‚ö°'
            )}
          </button>
        </div>

        {/* Results Display */}
        {simulation.oofComparison && (
          <div className="space-y-8">
            {/* Timeline Visualization */}
            <div className="relative">
              <div className="h-2 bg-purple-200 rounded-full">
                <div 
                  className="h-2 bg-purple-600 rounded-full transition-all duration-1000"
                  style={{ width: '60%' }}
                />
              </div>
              <div className="flex justify-between mt-4">
                <div className="text-center">
                  <div className="bg-purple-100 p-2 rounded-full mb-2">
                    <Calendar size={20} className="text-purple-600" />
                  </div>
                  <div className="text-sm text-purple-600">Start Date</div>
                  <div className="font-bold text-purple-900">
                    {simulation.startDate}
                  </div>
                </div>
                <div className="text-center">
                  <div className="bg-purple-100 p-2 rounded-full mb-2">
                    <Trophy size={20} className="text-purple-600" />
                  </div>
                  <div className="text-sm text-purple-600">Peak</div>
                  <div className="font-bold text-purple-900">+1000%</div>
                </div>
                <div className="text-center">
                  <div className="bg-purple-100 p-2 rounded-full mb-2">
                    <Timer size={20} className="text-purple-600" />
                  </div>
                  <div className="text-sm text-purple-600">Time Elapsed</div>
                  <div className="font-bold text-purple-900">
                    {simulation.oofComparison.timeElapsed}
                  </div>
                </div>
              </div>
            </div>

            {/* Comparison Cards */}
            <div className="grid grid-cols-2 gap-8">
              {/* Missed Opportunity */}
              <div className="bg-red-50 p-6 rounded-xl">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-red-900">
                      Missed Gains on {simulation.selectedCoin?.name}
                    </h3>
                    <p className="text-red-600">If you had invested...</p>
                  </div>
                  <div className="text-4xl">{simulation.selectedCoin?.emoji}</div>
                </div>
                <div className="text-3xl font-bold text-red-600 mb-2">
                  ${simulation.oofComparison.missedGains.toLocaleString()}
                </div>
                <div className="text-sm text-red-600">
                  That's a lot of OOFs! ü§¶‚Äç‚ôÇÔ∏è
                </div>
              </div>

              {/* OOF Potential */}
              <div className="bg-green-50 p-6 rounded-xl">
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="text-xl font-bold text-green-900">
                      $OOF Staking Potential
                    </h3>
                    <p className="text-green-600">But you can still...</p>
                  </div>
                  <div className="text-4xl">üíé</div>
                </div>
                <div className="text-3xl font-bold text-green-600 mb-2">
                  ${simulation.oofComparison.oofPotential.toLocaleString()}
                </div>
                <div className="text-sm text-green-600">
                  It's not too late to join the $OOF revolution! üöÄ
                </div>
              </div>
            </div>

            {/* Share Section */}
            <div className="flex justify-center space-x-4">
              <button className="bg-blue-500 text-white px-6 py-3 rounded-lg 
                               hover:bg-blue-600 transition-colors">
                <Share2 className="inline mr-2" size={20} />
                Share Time Travel Results
              </button>
              <button className="bg-purple-600 text-white px-6 py-3 rounded-lg 
                               hover:bg-purple-700 transition-colors">
                <Download className="inline mr-2" size={20} />
                Download Journey
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default OOFTimeMachine;