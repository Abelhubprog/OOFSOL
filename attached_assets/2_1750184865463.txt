import React, { useState, useEffect } from 'react';
import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import { useWallet } from '@solana/wallet-adapter-react';
import { Connection, PublicKey } from '@solana/web3.js';

const OOFPlatform = () => {
  // Wallet States
  const wallet = useWallet();
  const [connection, setConnection] = useState(null);
  const [balance, setBalance] = useState({
    sol: 0,
    oof: 0,
    staked: 0
  });

  // Market Data
  const [marketData, setMarketData] = useState({
    solPrice: 0,
    oofPrice: 0.0045,
    marketCap: '4.5M',
    volume24h: '850K',
    priceChange: '+12.5%'
  });

  // Profile States
  const [profiles, setProfiles] = useState([]);
  const [showSubmitProfile, setShowSubmitProfile] = useState(false);

  // Initialize connection
  useEffect(() => {
    const conn = new Connection('YOUR_RPC_ENDPOINT');
    setConnection(conn);

    // Setup real-time price updates
    const priceInterval = setInterval(updatePrices, 10000);
    return () => clearInterval(priceInterval);
  }, []);

  // Update balances when wallet connects
  useEffect(() => {
    if (wallet.publicKey && connection) {
      updateBalances();
    }
  }, [wallet.publicKey, connection]);

  const updateBalances = async () => {
    try {
      const solBalance = await connection.getBalance(wallet.publicKey);
      // Implement $OOF token balance lookup
      setBalance({
        sol: solBalance / 1e9,
        oof: 0, // Add token balance
        staked: 0 // Add staked balance
      });
    } catch (error) {
      console.error('Error updating balances:', error);
    }
  };

  const updatePrices = async () => {
    // Implement price feed updates
  };

  // Trading Interface Component
  const TradingInterface = () => (
    <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-bold text-purple-900">$OOF Trading Hub</h2>
        <div className="flex items-center space-x-4">
          <div className="bg-purple-50 px-4 py-2 rounded-lg">
            <span className="text-sm text-purple-600">SOL:</span>
            <span className="font-bold ml-2">${marketData.solPrice}</span>
          </div>
          <WalletMultiButton />
        </div>
      </div>

      {/* Market Stats */}
      <div className="grid grid-cols-3 gap-6 mb-8">
        <div className="bg-purple-50 rounded-lg p-4">
          <div className="text-sm text-purple-600">Price</div>
          <div className="text-2xl font-bold text-purple-900">
            ${marketData.oofPrice}
          </div>
          <div className="text-green-500 text-sm">{marketData.priceChange}</div>
        </div>
        <div className="bg-purple-50 rounded-lg p-4">
          <div className="text-sm text-purple-600">Market Cap</div>
          <div className="text-2xl font-bold text-purple-900">
            ${marketData.marketCap}
          </div>
        </div>
        <div className="bg-purple-50 rounded-lg p-4">
          <div className="text-sm text-purple-600">24h Volume</div>
          <div className="text-2xl font-bold text-purple-900">
            ${marketData.volume24h}
          </div>
        </div>
      </div>

      {wallet.connected ? (
        <div className="grid grid-cols-2 gap-6">
          {/* Trading Form */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Amount (SOL)
              </label>
              <input
                type="number"
                placeholder="0.0"
                className="w-full p-3 border rounded-lg focus:ring-2 
                         focus:ring-purple-500 outline-none"
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <button className="bg-green-600 text-white px-4 py-3 rounded-lg
                             hover:bg-green-700 transition-colors">
                Buy $OOF
              </button>
              <button className="bg-red-600 text-white px-4 py-3 rounded-lg
                             hover:bg-red-700 transition-colors">
                Sell $OOF
              </button>
            </div>
          </div>

          {/* Staking Interface */}
          <div className="bg-purple-50 rounded-lg p-4">
            <h3 className="font-bold text-purple-900 mb-4">$OOF Staking</h3>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span>APY</span>
                <span className="font-bold">25%</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Lock Period</span>
                <span className="font-bold">7 days</span>
              </div>
              <button className="w-full bg-purple-600 text-white px-4 py-3 
                             rounded-lg hover:bg-purple-700 transition-colors">
                Stake $OOF
              </button>
            </div>
          </div>
        </div>
      ) : (
        <div className="text-center py-8">
          <p className="text-purple-600 mb-4">Connect your wallet to trade</p>
        </div>
      )}
    </div>
  );

  // Profile Card Component
  const ProfileCard = ({ profile }) => (
    <div className={`${profile.background} rounded-2xl p-1 transform 
                  hover:scale-105 transition-all duration-300`}>
      <div className="bg-black bg-opacity-30 rounded-xl p-6 backdrop-blur-sm">
        {/* Profile Header */}
        <div className="flex justify-between items-start mb-6">
          <div className="flex items-center space-x-4">
            <div className="text-5xl">{profile.avatar}</div>
            <div>
              <div className="flex items-center space-x-2">
                <h3 className="text-white text-xl font-bold">{profile.name}</h3>
                {profile.isExclusive && (
                  <span className="bg-yellow-400 text-yellow-900 text-xs 
                               px-2 py-1 rounded-full">
                    EXCLUSIVE
                  </span>
                )}
              </div>
              <p className="text-white text-opacity-80">{profile.handle}</p>
            </div>
          </div>
          <div className="bg-white bg-opacity-20 px-3 py-1 rounded-full">
            <span className="text-white">Lvl {profile.level}</span>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-3 gap-4 mb-6">
          <div className="bg-white bg-opacity-10 rounded-lg p-3">
            <div className="text-white text-opacity-70 text-sm">Influence</div>
            <div className="text-white text-xl font-bold">{profile.influence}</div>
          </div>
          <div className="bg-white bg-opacity-10 rounded-lg p-3">
            <div className="text-white text-opacity-70 text-sm">Followers</div>
            <div className="text-white text-xl font-bold">{profile.followers}</div>
          </div>
          <div className="bg-white bg-opacity-10 rounded-lg p-3">
            <div className="text-white text-opacity-70 text-sm">Gems Found</div>
            <div className="text-white text-xl font-bold">{profile.gemsFound}</div>
          </div>
        </div>

        {/* Specialties */}
        <div className="flex flex-wrap gap-2 mb-6">
          {profile.specialties.map((specialty, index) => (
            <div key={index} 
                 className="bg-white bg-opacity-10 px-3 py-1 rounded-full 
                          text-white text-sm">
              {specialty}
            </div>
          ))}
        </div>

        {/* Achievements */}
        <div className="space-y-3 mb-6">
          {profile.achievements.map((achievement, index) => (
            <div key={index} 
                 className="bg-white bg-opacity-10 rounded-lg p-3 
                          flex items-center space-x-3">
              <span className="text-2xl">{achievement.icon}</span>
              <div>
                <div className="text-white font-bold">
                  {achievement.name}
                </div>
                <div className="text-white text-opacity-70 text-sm">
                  {achievement.description}
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* $OOF Stats */}
        <div className="grid grid-cols-2 gap-4">
          <div className="bg-white bg-opacity-10 rounded-lg p-4">
            <div className="text-white text-opacity-70 text-sm">$OOF Balance</div>
            <div className="text-white text-xl font-bold">
              {profile.oofBalance.toLocaleString()}
            </div>
          </div>
          <div className="bg-white bg-opacity-10 rounded-lg p-4">
            <div className="text-white text-opacity-70 text-sm">
              Staking Rewards
            </div>
            <div className="text-white text-xl font-bold">
              {profile.stakingRewards.toLocaleString()}
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  // Profile Submission Form
  const ProfileSubmission = () => (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <h2 className="text-2xl font-bold text-purple-900 mb-6">
        Submit Your Profile
      </h2>

      <form className="space-y-6">
        {/* Basic Info */}
        <div className="grid grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Name
            </label>
            <input
              type="text"
              className="w-full p-3 border rounded-lg focus:ring-2 
                       focus:ring-purple-500 outline-none"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Handle
            </label>
            <input
              type="text"
              className="w-full p-3 border rounded-lg focus:ring-2 
                       focus:ring-purple-500 outline-none"
            />
          </div>
        </div>

        {/* Specialties */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Specialties
          </label>
          <input
            type="text"
            placeholder="Add specialties (comma separated)"
            className="w-full p-3 border rounded-lg focus:ring-2 
                     focus:ring-purple-500 outline-none"
          />
        </div>

        {/* Social Links */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Social Links
          </label>
          <div className="space-y-4">
            <input
              type="text"
              placeholder="Twitter URL"
              className="w-full p-3 border rounded-lg focus:ring-2 
                       focus:ring-purple-500 outline-none"
            />
            <input
              type="text"
              placeholder="Discord Username"
              className="w-full p-3 border rounded-lg focus:ring-2 
                       focus:ring-purple-500 outline-none"
            />
          </div>
        </div>

        <button
          type="submit"
          className="w-full bg-purple-600 text-white px-6 py-3 rounded-lg
                   hover:bg-purple-700 transition-colors"
        >
          Submit for Review
        </button>
      </form>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-purple-100 p-8">
      <div className="max-w-7xl mx-auto">
        {/* Trading Interface */}
        <TradingInterface />

        {/* Profile Management */}
        <div className="flex justify-between items-center mb-8">
          <h2 className="text-2xl font-bold text-purple-900">OOF Legends</h2>
          <button
            onClick={() => setShowSubmitProfile(!showSubmitProfile)}
            className="bg-purple-600 text-white px-6 py-3 rounded-lg
                     hover:bg-purple-700 transition-colors"
          >
            Submit Profile
          </button>
        </div>

        {showSubmitProfile && <ProfileSubmission />}

        {/* Profiles Grid */}
        <div className="grid grid-cols-2 gap-8">
          {profiles.map((profile, index) => (
            <ProfileCard key={index} profile={profile} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default OOFPlatform;