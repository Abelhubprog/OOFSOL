import React, { useState, useEffect } from 'react';
import { 
  BookOpen, Clock, Star, Map, Sparkles, Crown, 
  Share2, Heart, MessageCircle, Trophy, Zap, Gift,
  Rocket, Target
} from 'lucide-react';

// Expanded Memecoin Stories
const MEMECOIN_STORIES = {
  bonkSaga: {
    title: "The BONK Awakening",
    era: "December 2023",
    icon: "🐕",
    background: "bg-gradient-to-br from-yellow-400 to-yellow-600",
    difficulty: "Legendary",
    type: "Origin Story",
    stats: {
      potentialGains: "100x",
      timeframe: "1 week",
      significance: "Solana's Revival"
    }
  },
  
  myroTales: {
    title: "MYRO Mania",
    era: "February 2024",
    icon: "🐱",
    background: "bg-gradient-to-br from-purple-400 to-purple-600",
    difficulty: "Epic",
    type: "Viral Surge",
    stats: {
      potentialGains: "50x",
      timeframe: "3 days",
      significance: "Cat Season"
    }
  },
  
  wifChronicles: {
    title: "WIF Explosion",
    era: "March 2024",
    icon: "🐶",
    background: "bg-gradient-to-br from-blue-400 to-blue-600",
    difficulty: "Epic",
    type: "Market Shift",
    stats: {
      potentialGains: "70x",
      timeframe: "5 days",
      significance: "Dog Wars"
    }
  },

  bookSaga: {
    title: "BOOK of Memes",
    era: "March 2024",
    icon: "📚",
    background: "bg-gradient-to-br from-green-400 to-green-600",
    difficulty: "Legendary",
    type: "Culture Shift",
    stats: {
      potentialGains: "40x",
      timeframe: "2 days",
      significance: "Meme Culture"
    }
  },

  peoplesTale: {
    title: "PEOPLES Power",
    era: "March 2024",
    icon: "👥",
    background: "bg-gradient-to-br from-red-400 to-red-600",
    difficulty: "Epic",
    type: "Community Movement",
    stats: {
      potentialGains: "30x",
      timeframe: "4 days",
      significance: "Community Focus"
    }
  },

  bomeChronicles: {
    title: "BOME Blast",
    era: "March 2024",
    icon: "💣",
    background: "bg-gradient-to-br from-pink-400 to-pink-600",
    difficulty: "Rare",
    type: "Explosive Launch",
    stats: {
      potentialGains: "25x",
      timeframe: "2 days",
      significance: "Quick Gains"
    }
  }
};

// Enhanced Story Selection UI
const StorySelector = ({ onSelect }) => {
  const [filter, setFilter] = useState('all');
  const [sortBy, setSortBy] = useState('date');

  return (
    <div className="space-y-8">
      {/* Filters */}
      <div className="flex justify-between items-center">
        <div className="flex space-x-4">
          {['all', 'legendary', 'epic', 'rare'].map(type => (
            <button
              key={type}
              onClick={() => setFilter(type)}
              className={`px-4 py-2 rounded-full transition-all
                ${filter === type 
                  ? 'bg-purple-600 text-white' 
                  : 'bg-purple-100 text-purple-600 hover:bg-purple-200'}`}
            >
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </button>
          ))}
        </div>
        <select
          value={sortBy}
          onChange={(e) => setSortBy(e.target.value)}
          className="bg-purple-100 text-purple-600 px-4 py-2 rounded-full"
        >
          <option value="date">Latest First</option>
          <option value="gains">Highest Gains</option>
          <option value="difficulty">Difficulty</option>
        </select>
      </div>

      {/* Story Grid */}
      <div className="grid grid-cols-2 gap-6">
        {Object.entries(MEMECOIN_STORIES)
          .filter(([_, story]) => 
            filter === 'all' || story.difficulty.toLowerCase() === filter
          )
          .map(([key, story]) => (
            <StoryCard 
              key={key} 
              story={story} 
              onSelect={() => onSelect(story)} 
            />
          ))}
      </div>
    </div>
  );
};

// Enhanced Story Card
const StoryCard = ({ story, onSelect }) => (
  <div 
    onClick={onSelect}
    className={`${story.background} rounded-xl p-6 cursor-pointer
              transform hover:scale-105 transition-all duration-300`}
  >
    {/* Header */}
    <div className="flex justify-between items-start mb-6">
      <div className="flex items-center space-x-3">
        <div className="text-4xl">{story.icon}</div>
        <div>
          <h3 className="text-white text-xl font-bold">{story.title}</h3>
          <p className="text-white text-opacity-80">{story.era}</p>
        </div>
      </div>
      <span className="bg-black bg-opacity-20 px-3 py-1 rounded-full text-white text-sm">
        {story.difficulty}
      </span>
    </div>

    {/* Stats Grid */}
    <div className="grid grid-cols-3 gap-4 mb-6">
      <div className="bg-white bg-opacity-20 rounded-lg p-3">
        <div className="text-white text-opacity-70 text-sm mb-1">Potential</div>
        <div className="text-white font-bold">{story.stats.potentialGains}</div>
      </div>
      <div className="bg-white bg-opacity-20 rounded-lg p-3">
        <div className="text-white text-opacity-70 text-sm mb-1">Timeframe</div>
        <div className="text-white font-bold">{story.stats.timeframe}</div>
      </div>
      <div className="bg-white bg-opacity-20 rounded-lg p-3">
        <div className="text-white text-opacity-70 text-sm mb-1">Type</div>
        <div className="text-white font-bold">{story.type}</div>
      </div>
    </div>

    {/* Significance */}
    <div className="bg-black bg-opacity-20 rounded-lg p-4">
      <div className="text-white text-opacity-70 text-sm mb-1">Historical Impact</div>
      <div className="text-white">{story.stats.significance}</div>
    </div>

    {/* Action */}
    <div className="mt-6 flex justify-end">
      <button className="bg-white bg-opacity-20 hover:bg-opacity-30 
                      transition-all px-4 py-2 rounded-lg text-white
                      flex items-center space-x-2">
        <BookOpen size={18} />
        <span>Experience Story</span>
      </button>
    </div>
  </div>
);

// Story Experience Component
const StoryExperience = ({ story, onComplete }) => {
  const [chapter, setChapter] = useState(0);
  const [choices, setChoices] = useState([]);
  const [rewards, setRewards] = useState([]);

  return (
    <div className={`${story.background} rounded-xl p-8 text-white`}>
      {/* Story Progress */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h2 className="text-2xl font-bold">{story.title}</h2>
          <p className="text-white text-opacity-80">{story.era}</p>
        </div>
        <div className="flex items-center space-x-4">
          <div className="bg-black bg-opacity-20 px-4 py-2 rounded-full">
            Chapter {chapter + 1}/5
          </div>
          <div className="bg-black bg-opacity-20 px-4 py-2 rounded-full flex items-center">
            <Trophy size={18} className="mr-2" />
            <span>{rewards.length} Moments</span>
          </div>
        </div>
      </div>

      {/* Story Content */}
      <div className="space-y-8">
        {/* Chapter content and choices here */}
      </div>
    </div>
  );
};

// Main Component
const OOFOrigins = () => {
  const [selectedStory, setSelectedStory] = useState(null);
  
  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-purple-900 mb-2">
          OOF Origins: Memecoin Time Machine
        </h1>
        <p className="text-purple-600">
          Relive the greatest moments in Solana memecoin history! 🚀
        </p>
      </div>

      {/* Main Content */}
      {selectedStory ? (
        <StoryExperience 
          story={selectedStory}
          onComplete={() => setSelectedStory(null)}
        />
      ) : (
        <StorySelector onSelect={setSelectedStory} />
      )}
    </div>
  );
};

export default OOFOrigins;