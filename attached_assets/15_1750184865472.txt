import React, { useState, useEffect } from 'react';
import { 
  Zap, Trophy, Star, Crown, Gift, Sparkles,
  Timer, Rocket, ChevronsDown, ArrowRight
} from 'lucide-react';

const OOFMultiverseSlots = () => {
  const [userBalance, setUserBalance] = useState({
    oofTokens: 1000,
    tickets: 5,
    nftCollection: []
  });

  const [spinState, setSpinState] = useState({
    isSpinning: false,
    currentResult: null,
    multiplier: 1,
    streak: 0
  });

  const [jackpot, setJackpot] = useState(25000);

  // Slot reel contents
  const reelSymbols = {
    memecoin: ['BONK', 'MYRO', 'WIF', 'BOOK', 'SAMO'],
    action: ['PUMP', 'DUMP', 'MOON', 'DIP', 'APE'],
    multiplier: ['2x', '3x', '5x', '10x', '100x']
  };

  // Rare combinations that unlock special scenes
  const rareCombos = [
    {
      combo: ['BONK', 'MOON', '100x'],
      name: 'The Great BONK Explosion',
      description: 'When BONK did a legendary 100x pump',
      rarity: 'legendary',
      reward: 1000,
      color: 'yellow'
    },
    {
      combo: ['MYRO', 'PUMP', '10x'],
      name: 'MYRO Mania',
      description: 'The unforgettable MYRO launch',
      rarity: 'epic',
      reward: 500,
      color: 'purple'
    },
    // Add more combos
  ];

  // Animated slot machine component
  const SlotMachine = () => (
    <div className="relative bg-gradient-to-br from-purple-800 to-purple-900 
                    rounded-xl p-8 shadow-2xl">
      {/* Machine Frame */}
      <div className="mb-8 text-center">
        <h2 className="text-2xl font-bold text-white mb-2">
          OOF Multiverse Slots
        </h2>
        <div className="text-purple-200">
          Spin to unlock legendary memecoin moments!
        </div>
      </div>

      {/* Jackpot Display */}
      <div className="absolute top-4 right-4 bg-yellow-400 px-4 py-2 rounded-full
                    text-yellow-900 font-bold animate-pulse">
        üèÜ {jackpot} $OOF
      </div>

      {/* Reels */}
      <div className="grid grid-cols-3 gap-4 mb-8">
        {Object.keys(reelSymbols).map((reel, index) => (
          <div key={reel} className="bg-white rounded-lg p-4 h-32
                                   flex items-center justify-center
                                   text-2xl font-bold relative overflow-hidden">
            {spinState.isSpinning ? (
              <div className="animate-spin-slow">
                {reelSymbols[reel].map((symbol, i) => (
                  <div key={i} className="absolute inset-0 flex items-center justify-center">
                    {symbol}
                  </div>
                ))}
              </div>
            ) : (
              <div>{spinState.currentResult?.[index] || '?'}</div>
            )}
          </div>
        ))}
      </div>

      {/* Controls */}
      <div className="flex justify-center space-x-4">
        <button
          disabled={spinState.isSpinning}
          onClick={() => spinSlots()}
          className="bg-gradient-to-r from-yellow-400 to-yellow-500
                   text-yellow-900 px-8 py-4 rounded-xl font-bold
                   hover:from-yellow-500 hover:to-yellow-600
                   transform hover:scale-105 transition-all
                   disabled:opacity-50 disabled:cursor-not-allowed
                   flex items-center space-x-2"
        >
          <Zap size={24} />
          <span>SPIN (5 $OOF)</span>
        </button>
        
        <button
          disabled={userBalance.tickets < 1}
          onClick={() => spinSlots(true)}
          className="bg-gradient-to-r from-purple-400 to-purple-500
                   text-white px-8 py-4 rounded-xl font-bold
                   hover:from-purple-500 hover:to-purple-600
                   transform hover:scale-105 transition-all
                   disabled:opacity-50 disabled:cursor-not-allowed
                   flex items-center space-x-2"
        >
          <Star size={24} />
          <span>Use Ticket ({userBalance.tickets})</span>
        </button>
      </div>
    </div>
  );

  // Result display component
  const ResultDisplay = ({ result }) => (
    <div className={`bg-${result.color}-50 rounded-xl p-6 shadow-lg
                    transform animate-slideIn`}>
      <div className="text-center mb-6">
        <div className="text-6xl mb-4">{result.icon}</div>
        <h3 className="text-2xl font-bold text-gray-900 mb-2">
          {result.name}
        </h3>
        <p className="text-gray-600">{result.description}</p>
      </div>

      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="bg-white rounded-lg p-4 text-center">
          <div className="text-sm text-gray-600 mb-1">Reward</div>
          <div className="text-2xl font-bold text-purple-600">
            {result.reward} $OOF
          </div>
        </div>
        <div className="bg-white rounded-lg p-4 text-center">
          <div className="text-sm text-gray-600 mb-1">Rarity</div>
          <div className="text-2xl font-bold text-purple-600">
            {result.rarity.toUpperCase()}
          </div>
        </div>
      </div>

      <div className="flex justify-center space-x-4">
        <button 
          onClick={() => mintMoment(result)}
          className="bg-purple-600 text-white px-6 py-3 rounded-lg
                   hover:bg-purple-700 transition-colors"
        >
          Mint as NFT
        </button>
        <button
          onClick={() => spinSlots()}
          className="bg-yellow-400 text-yellow-900 px-6 py-3 rounded-lg
                   hover:bg-yellow-500 transition-colors"
        >
          Spin Again
        </button>
      </div>
    </div>
  );

  // NFT Collection Display
  const NFTCollection = () => (
    <div className="bg-white rounded-xl p-6 shadow-lg">
      <h2 className="text-xl font-bold mb-6 flex items-center">
        <Crown className="text-purple-600 mr-2" />
        Your OOF Moments Collection
      </h2>

      <div className="grid grid-cols-3 gap-4">
        {userBalance.nftCollection.map((nft, index) => (
          <div key={index} className={`bg-${nft.rarity}-50 p-4 rounded-lg`}>
            <div className="text-4xl mb-2">{nft.icon}</div>
            <div className="font-bold">{nft.name}</div>
            <div className="text-sm text-gray-600">
              {new Date(nft.mintDate).toLocaleDateString()}
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Spin logic
  const spinSlots = async (useTicket = false) => {
    if (spinState.isSpinning) return;
    
    // Check balance
    if (!useTicket && userBalance.oofTokens < 5) return;
    if (useTicket && userBalance.tickets < 1) return;

    setSpinState({ ...spinState, isSpinning: true });

    // Update balance
    if (!useTicket) {
      setUserBalance({
        ...userBalance,
        oofTokens: userBalance.oofTokens - 5
      });
    } else {
      setUserBalance({
        ...userBalance,
        tickets: userBalance.tickets - 1
      });
    }

    // Simulate spin delay
    await new Promise(resolve => setTimeout(resolve, 2000));

    // Generate result
    const result = generateSpinResult(useTicket);
    
    setSpinState({
      isSpinning: false,
      currentResult: result,
      multiplier: spinState.streak >= 5 ? 2 : 1,
      streak: result.reward > 0 ? spinState.streak + 1 : 0
    });

    // Update user balance with winnings
    if (result.reward > 0) {
      const totalReward = result.reward * spinState.multiplier;
      setUserBalance({
        ...userBalance,
        oofTokens: userBalance.oofTokens + totalReward
      });
    }
  };

  // Result generation logic
  const generateSpinResult = (useTicket) => {
    const result = {
      memecoin: reelSymbols.memecoin[Math.floor(Math.random() * reelSymbols.memecoin.length)],
      action: reelSymbols.action[Math.floor(Math.random() * reelSymbols.action.length)],
      multiplier: reelSymbols.multiplier[Math.floor(Math.random() * reelSymbols.multiplier.length)]
    };

    // Check for rare combinations
    const rareCombo = rareCombos.find(combo => 
      combo.combo[0] === result.memecoin &&
      combo.combo[1] === result.action &&
      combo.combo[2] === result.multiplier
    );

    if (rareCombo) {
      return {
        ...rareCombo,
        result
      };
    }

    // Generate basic result
    return {
      name: 'Regular Spin',
      description: 'Keep spinning for rare moments!',
      rarity: 'common',
      reward: calculateReward(result),
      color: 'gray',
      result
    };
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-purple-900 mb-2">
          OOF Multiverse Slots
        </h1>
        <p className="text-purple-600">
          Spin through time, collect legendary moments! üé∞
        </p>
      </div>

      {/* User Stats */}
      <div className="grid grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-xl p-4 shadow-lg">
          <div className="flex items-center space-x-2 text-purple-600 mb-2">
            <Zap size={20} />
            <span>$OOF Balance</span>
          </div>
          <div className="text-2xl font-bold">
            {userBalance.oofTokens}
          </div>
        </div>

        <div className="bg-white rounded-xl p-4 shadow-lg">
          <div className="flex items-center space-x-2 text-purple-600 mb-2">
            <Trophy size={20} />
            <span>Win Streak</span>
          </div>
          <div className="text-2xl font-bold">
            {spinState.streak}x
          </div>
        </div>

        <div className="bg-white rounded-xl p-4 shadow-lg">
          <div className="flex items-center space-x-2 text-purple-600 mb-2">
            <Star size={20} />
            <span>Rare Finds</span>
          </div>
          <div className="text-2xl font-bold">
            {userBalance.nftCollection.length}
          </div>
        </div>

        <div className="bg-white rounded-xl p-4 shadow-lg">
          <div className="flex items-center space-x-2 text-purple-600 mb-2">
            <Gift size={20} />
            <span>Free Spins</span>
          </div>
          <div className="text-2xl font-bold">
            {userBalance.tickets}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-3 gap-8">
        {/* Slot Machine */}
        <div className="col-span-2">
          <SlotMachine />
          {spinState.currentResult && !spinState.isSpinning && (
            <ResultDisplay result={spinState.currentResult} />
          )}
        </div>

        {/* Right Column */}
        <div className="space-y-8">
          <NFTCollection />
          
          {/* Bonus Features */}
          <div className="bg-white rounded-xl p-6 shadow-lg">
            <h2 className="text-xl font-bold mb-6">Daily Rewards</h2>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Timer className="text-purple-600" />
                  <span>Next Free Spin</span>
                </div>
                <div className="font-bold">2:45:30</div>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Rocket className="text-purple-600" />
                  <span>Streak Bonus</span>
                </div>
                <div className="font-bold text-green-600">+50%</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OOFMultiverseSlots;