import React, { useState, useEffect } from 'react';
import { 
  Wallet, Star, Gift, Gem, Trophy, Share2, 
  Rocket, Download, Sparkles, Zap 
} from 'lucide-react';

// Expanded memecoin database with more detailed stats
const MEMECOIN_DATABASE = [
  {
    id: 'bonk',
    name: 'BONK',
    symbol: 'BONK',
    icon: '🐕',
    launchDate: '2023-12',
    peakMcap: 1000000000,
    events: [
      {
        type: 'legendary',
        name: 'The Great BONK Rush',
        description: 'Selling BONK one day before 100x pump',
        missedGains: 150000,
        date: 'Jan 2024',
        power: 95,
        effect: 'Double OOF Score'
      },
      {
        type: 'epic',
        name: 'BONK Early Exit',
        description: 'Paper handed BONK at first 2x',
        missedGains: 75000,
        date: 'Dec 2023',
        power: 85,
        effect: 'FOMO Multiplier'
      }
    ]
  },
  {
    id: 'myro',
    name: 'MYRO',
    symbol: 'MYRO',
    icon: '🐱',
    launchDate: '2024-02',
    peakMcap: 200000000,
    events: [
      {
        type: 'epic',
        name: 'MYRO Paper Hands',
        description: 'Panic sold MYRO at launch',
        missedGains: 50000,
        date: 'Feb 2024',
        power: 85,
        effect: 'Instant Regret'
      }
    ]
  },
  {
    id: 'wif',
    name: 'WIF',
    symbol: 'WIF',
    icon: '🐶',
    launchDate: '2024-03',
    peakMcap: 150000000,
    events: [
      {
        type: 'legendary',
        name: 'WIF Wave Missed',
        description: 'Watched WIF moon from sidelines',
        missedGains: 120000,
        date: 'Mar 2024',
        power: 90,
        effect: 'FOMO Intensifier'
      }
    ]
  },
  // Add more memecoins with their iconic moments
];

// Funny default cards for new users
const DEFAULT_CARDS = [
  {
    type: 'rare',
    name: 'The Hesitant Trader',
    description: 'Still waiting for the perfect entry...',
    missedGains: '???',
    date: 'Forever Ago',
    icon: '🤔',
    power: 50,
    effect: 'Motivation Boost'
  },
  {
    type: 'epic',
    name: 'Future FOMO Guardian',
    description: 'Protecting you from future missed pumps',
    missedGains: 'TBD',
    date: 'Soon™',
    icon: '🛡️',
    power: 75,
    effect: 'FOMO Protection'
  }
];

const OOFMultiverseEnhanced = () => {
  const [walletState, setWalletState] = useState({
    connected: false,
    address: '',
    transactions: []
  });

  const [nftState, setNftState] = useState({
    minting: false,
    mintingProgress: 0,
    lastMinted: null
  });

  // Enhanced card generation based on wallet history
  const generateCardsFromWallet = async (address) => {
    try {
      // In production, this would call Solana API to get transaction history
      const transactions = await getWalletTransactions(address);
      
      return transactions.map(tx => {
        const memecoin = MEMECOIN_DATABASE.find(coin => 
          tx.token.toLowerCase() === coin.symbol.toLowerCase()
        );

        if (!memecoin) return null;

        const event = memecoin.events.find(e => 
          new Date(e.date) > new Date(tx.date)
        );

        if (!event) return null;

        return {
          ...event,
          realTransaction: true,
          txHash: tx.hash,
          actualAmount: tx.amount
        };
      }).filter(Boolean);
    } catch (error) {
      console.error('Error generating cards:', error);
      return DEFAULT_CARDS;
    }
  };

  // Mint card as NFT
  const mintCardAsNFT = async (card) => {
    setNftState({ ...nftState, minting: true, mintingProgress: 0 });
    
    try {
      // Simulated minting progress
      for (let i = 0; i <= 100; i += 20) {
        await new Promise(resolve => setTimeout(resolve, 500));
        setNftState(prev => ({ ...prev, mintingProgress: i }));
      }

      // In production, this would call Solana NFT minting
      const metadata = {
        name: `OOF Card: ${card.name}`,
        symbol: 'OOF',
        description: card.description,
        image: generateCardImage(card), // Function to generate card image
        attributes: [
          { trait_type: 'Type', value: card.type },
          { trait_type: 'Power', value: card.power },
          { trait_type: 'Effect', value: card.effect },
          { trait_type: 'Missed Gains', value: card.missedGains }
        ]
      };

      // Mint NFT logic here
      
      setNftState({
        minting: false,
        mintingProgress: 100,
        lastMinted: metadata
      });

    } catch (error) {
      console.error('Error minting NFT:', error);
      setNftState({ ...nftState, minting: false, mintingProgress: 0 });
    }
  };

  // Card Component with NFT minting
  const OOFCard = ({ card }) => (
    <div className={`relative bg-${card.type === 'legendary' ? 'yellow' : 'purple'}-100 
                    p-6 rounded-xl shadow-lg cursor-pointer hover:shadow-xl 
                    transition-all duration-300`}>
      <div className="absolute top-2 right-2">
        <span className={`text-xs px-2 py-1 rounded-full bg-${
          card.type === 'legendary' ? 'yellow' : 
          card.type === 'epic' ? 'purple' : 
          'blue'}-500 text-white`}>
          {card.type}
        </span>
      </div>

      <div className="text-center mb-4">
        <div className="text-6xl mb-2">{card.icon}</div>
        <h3 className="text-xl font-bold text-gray-900">{card.name}</h3>
      </div>

      <div className="space-y-2">
        <p className="text-sm text-gray-600">{card.description}</p>
        <div className="flex justify-between items-center">
          <span className="text-red-500 font-bold">
            {typeof card.missedGains === 'number' ? 
              `$${card.missedGains.toLocaleString()}` : 
              card.missedGains}
          </span>
          <span className="text-gray-500 text-sm">{card.date}</span>
        </div>

        {card.realTransaction && (
          <div className="text-xs text-gray-500 truncate">
            TX: {card.txHash}
          </div>
        )}

        <div className="flex justify-between items-center">
          <div className="flex items-center">
            <Zap className="text-yellow-500 mr-1" size={16} />
            <span className="text-sm">Power: {card.power}</span>
          </div>
          <span className="text-purple-600 text-sm">{card.effect}</span>
        </div>

        <button
          onClick={() => mintCardAsNFT(card)}
          disabled={nftState.minting}
          className="w-full mt-4 bg-purple-600 text-white px-4 py-2 rounded-lg
                   hover:bg-purple-700 transition-colors disabled:opacity-50"
        >
          {nftState.minting ? (
            <div className="flex items-center justify-center">
              <span className="mr-2">Minting</span>
              <span className="text-sm">{nftState.mintingProgress}%</span>
            </div>
          ) : (
            'Mint as NFT'
          )}
        </button>
      </div>
    </div>
  );

  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Existing UI components... */}
      
      {/* NFT Minting Success Modal */}
      {nftState.lastMinted && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
          <div className="bg-white p-8 rounded-xl max-w-md w-full">
            <div className="text-center mb-6">
              <Sparkles className="text-yellow-500 w-16 h-16 mx-auto mb-4" />
              <h3 className="text-2xl font-bold text-purple-900">
                NFT Minted Successfully!
              </h3>
            </div>
            
            {/* NFT Preview */}
            <div className="bg-purple-50 p-4 rounded-lg mb-6">
              <img 
                src={nftState.lastMinted.image} 
                alt="Minted NFT"
                className="w-full rounded-lg"
              />
            </div>

            <div className="flex justify-end space-x-4">
              <button 
                onClick={() => setNftState(prev => ({ ...prev, lastMinted: null }))}
                className="text-purple-600"
              >
                Close
              </button>
              <button className="bg-purple-600 text-white px-4 py-2 rounded-lg">
                View on Phantom
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OOFMultiverseEnhanced;