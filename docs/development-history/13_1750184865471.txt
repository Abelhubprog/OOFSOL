import React, { useState, useEffect } from 'react';
import { 
  BookOpen, Clock, Star, Map, Sparkles, Crown, 
  Share2, Heart, MessageCircle, Trophy, Zap, Gift
} from 'lucide-react';

// Enhanced Story Templates with Rich Storylines
const STORY_TEMPLATES = {
  bonkSaga: {
    title: "The Great BONK Awakening",
    description: "December 2023: The meme that changed Solana forever...",
    icon: "🐕",
    background: "bg-gradient-to-br from-yellow-400 to-yellow-600",
    difficulty: "Legendary",
    expectedTime: "10-15 min",
    chapters: [
      {
        id: "discovery",
        scene: `Late night on Crypto Twitter. Your notifications light up:
               "Anon, have you seen this new dog coin on Solana?"`,
        mood: "curiosity",
        animation: "meteor-shower",
        choices: [
          {
            text: "FOMO in with life savings 🚀",
            outcome: {
              text: "Sometimes pure degen energy is the way...",
              effect: "Your 3am decision becomes the trade of a lifetime.",
              reward: {
                title: "3AM Degen Legend",
                rarity: "mythic",
                effect: "Random 3am trades have 2x luck"
              }
            }
          },
          {
            text: "Sleep on it first 😴",
            outcome: {
              text: "The responsible choice... or was it?",
              effect: "You wake up to a 100x pump. The group chat is chaos.",
              reward: {
                title: "Professional Sleep Trader",
                rarity: "legendary",
                effect: "Gain 'Sleep Trading' power-up"
              }
            }
          }
        ]
      }
      // More chapters...
    ]
  },
  
  myroMystery: {
    title: "The MYRO Inception",
    description: "When cats ruled Solana...",
    icon: "🐱",
    background: "bg-gradient-to-br from-purple-400 to-purple-600",
    difficulty: "Epic",
    expectedTime: "8-12 min",
    chapters: [
      {
        id: "catSignal",
        scene: `Your friend who's never wrong about memecoins sends a message:
               "Anon... cats are the new dogs. Trust."`,
        mood: "anticipation",
        animation: "cat-walk",
        choices: [
          {
            text: "Ignore because dogs > cats 🐕",
            outcome: {
              text: "Your dog maximalism costs you dearly...",
              effect: "MYRO does a 50x. You write anti-cat posts while crying.",
              reward: {
                title: "Dog Maximalist Tears",
                rarity: "epic",
                effect: "Gained 'Species Diversity' wisdom"
              }
            }
          }
        ]
      }
    ]
  },
  
  wifSaga: {
    title: "The WIF Chronicles",
    description: "The dog that barked 100x...",
    icon: "🐶",
    background: "bg-gradient-to-br from-blue-400 to-blue-600",
    difficulty: "Rare",
    expectedTime: "5-8 min",
    chapters: [
      {
        id: "wiflaunch",
        scene: `/sol/ is buzzing with dog emojis again. 
               Your portfolio is still recovering from the last dog coin...`,
        mood: "uncertainty",
        animation: "dog-run",
        choices: [
          {
            text: "Not another dog coin! Skip 🙅‍♂️",
            outcome: {
              text: "Your dog coin PTSD hits hard...",
              effect: "WIF pulls a massive rally. You start barking at the moon.",
              reward: {
                title: "Anti-Dog Detective",
                rarity: "epic",
                effect: "Gained 'Pattern Recognition' skill"
              }
            }
          }
        ]
      }
    ]
  }
};

// Enhanced Story Reader Component
const StoryReader = ({ story, onComplete }) => {
  const [currentChapter, setCurrentChapter] = useState(0);
  const [animation, setAnimation] = useState(null);
  const [showChoice, setShowChoice] = useState(true);
  const [collectedMoments, setCollectedMoments] = useState([]);

  // Animated Scene Background
  const SceneBackground = ({ mood, animation }) => (
    <div className={`absolute inset-0 ${story.background} opacity-50 
                    ${animation} rounded-xl overflow-hidden`}>
      <div className="relative w-full h-full">
        {animation === 'meteor-shower' && (
          <div className="absolute inset-0 overflow-hidden">
            {[...Array(20)].map((_, i) => (
              <div 
                key={i}
                className="meteor-particle"
                style={{
                  '--delay': `${Math.random() * 5}s`,
                  '--position': `${Math.random() * 100}%`
                }}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );

  // Choice Card Component
  const ChoiceCard = ({ choice, onSelect }) => (
    <button
      onClick={() => onSelect(choice)}
      className="group relative w-full bg-white bg-opacity-10 backdrop-blur-sm
                 p-6 rounded-xl border-2 border-white border-opacity-20
                 hover:border-opacity-50 transition-all duration-300
                 transform hover:scale-105"
    >
      <div className="relative z-10">
        <h3 className="text-xl font-bold text-white mb-2">{choice.text}</h3>
        <p className="text-white text-opacity-80">
          What could happen? 🤔
        </p>
      </div>
      <div className="absolute inset-0 bg-gradient-to-r from-white to-transparent
                      opacity-0 group-hover:opacity-10 rounded-xl transition-opacity" />
    </button>
  );

  // Reward Card Component
  const RewardCard = ({ reward }) => (
    <div className={`bg-gradient-to-br 
      ${reward.rarity === 'mythic' ? 'from-rose-400 to-rose-600' :
        reward.rarity === 'legendary' ? 'from-yellow-400 to-yellow-600' :
        'from-purple-400 to-purple-600'}
      p-6 rounded-xl text-white transform hover:scale-105 transition-all`}
    >
      <div className="flex justify-between items-start mb-4">
        <div className="text-4xl">{story.icon}</div>
        <span className="px-3 py-1 rounded-full bg-black bg-opacity-20 text-xs font-bold">
          {reward.rarity.toUpperCase()}
        </span>
      </div>
      <h3 className="text-xl font-bold mb-2">{reward.title}</h3>
      <p className="text-sm opacity-80">{reward.effect}</p>
      <div className="mt-4 flex justify-between items-center">
        <button className="bg-white bg-opacity-20 px-4 py-2 rounded-lg
                          hover:bg-opacity-30 transition-all">
          <Share2 size={18} />
        </button>
        <button className="bg-white bg-opacity-20 px-4 py-2 rounded-lg
                          hover:bg-opacity-30 transition-all">
          Mint as NFT
        </button>
      </div>
    </div>
  );

  return (
    <div className="relative min-h-[600px] rounded-xl overflow-hidden">
      <SceneBackground 
        mood={story.chapters[currentChapter].mood}
        animation={story.chapters[currentChapter].animation}
      />
      
      <div className="relative z-10 p-8">
        {/* Story Header */}
        <div className="flex justify-between items-start mb-8">
          <div>
            <h2 className="text-3xl font-bold text-white">{story.title}</h2>
            <p className="text-white text-opacity-80">{story.description}</p>
          </div>
          <div className="flex items-center space-x-4">
            <div className="bg-black bg-opacity-20 px-4 py-2 rounded-full">
              <Clock className="inline-block mr-2 text-white" size={18} />
              <span className="text-white">{story.expectedTime}</span>
            </div>
            <div className="bg-black bg-opacity-20 px-4 py-2 rounded-full">
              <Trophy className="inline-block mr-2 text-white" size={18} />
              <span className="text-white">{story.difficulty}</span>
            </div>
          </div>
        </div>

        {/* Story Content */}
        <div className="space-y-8">
          <div className="bg-black bg-opacity-20 p-6 rounded-xl">
            <p className="text-xl text-white leading-relaxed">
              {story.chapters[currentChapter].scene}
            </p>
          </div>

          {/* Choices */}
          {showChoice && (
            <div className="grid grid-cols-2 gap-6">
              {story.chapters[currentChapter].choices.map((choice, index) => (
                <ChoiceCard 
                  key={index} 
                  choice={choice}
                  onSelect={(selected) => {
                    setShowChoice(false);
                    setCollectedMoments([...collectedMoments, selected.outcome.reward]);
                  }}
                />
              ))}
            </div>
          )}

          {/* Rewards Display */}
          {!showChoice && collectedMoments.length > 0 && (
            <div className="space-y-6">
              <h3 className="text-2xl font-bold text-white">
                Moments Collected
              </h3>
              <div className="grid grid-cols-2 gap-6">
                {collectedMoments.map((reward, index) => (
                  <RewardCard key={index} reward={reward} />
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Main Component
const OOFOrigins = () => {
  const [selectedStory, setSelectedStory] = useState(null);
  
  return (
    <div className="max-w-6xl mx-auto p-6">
      {/* Header */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-purple-900 mb-2">
          OOF Origins
        </h1>
        <p className="text-purple-600">
          Where Every Trade Has a Story 📚✨
        </p>
      </div>

      {/* Story Selection */}
      {!selectedStory ? (
        <div className="grid grid-cols-3 gap-8">
          {Object.entries(STORY_TEMPLATES).map(([key, story]) => (
            <div
              key={key}
              onClick={() => setSelectedStory(story)}
              className={`${story.background} rounded-xl p-6 cursor-pointer
                       transform hover:scale-105 transition-all text-white`}
            >
              <div className="flex justify-between items-start mb-4">
                <div className="text-4xl">{story.icon}</div>
                <div className="bg-black bg-opacity-20 px-3 py-1 rounded-full text-sm">
                  {story.difficulty}
                </div>
              </div>
              <h2 className="text-xl font-bold mb-2">{story.title}</h2>
              <p className="text-white text-opacity-80 mb-4">
                {story.description}
              </p>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Clock size={16} />
                  <span className="text-sm">{story.expectedTime}</span>
                </div>
                <button className="bg-white bg-opacity-20 px-3 py-1 rounded-full
                                text-sm hover:bg-opacity-30 transition-all">
                  Start Journey
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <StoryReader 
          story={selectedStory}
          onComplete={() => setSelectedStory(null)}
        />
      )}
    </div>
  );
};

export default OOFOrigins;