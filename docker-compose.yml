version: '3.8'

services:
  # üóÑÔ∏è PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: oof-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: oof_platform
      POSTGRES_USER: oof_user
      POSTGRES_PASSWORD: oof_password_change_in_production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - oof-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oof_user -d oof_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üîÑ Redis Cache
  redis:
    image: redis:7-alpine
    container_name: oof-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - oof-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üöÄ OOF Platform API Server
  oof-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oof-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://oof_user:oof_password_change_in_production@postgres:5432/oof_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SOLANA_RPC_URL: ${SOLANA_RPC_URL}
      ZORA_API_KEY: ${ZORA_API_KEY}
      PORT: 5000
      HOST: 0.0.0.0
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - oof-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üåê Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: oof-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - oof-network
    depends_on:
      - oof-api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  oof-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local